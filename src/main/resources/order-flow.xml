<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow
            http://www.springframework.org/schema/webflow/spring-webflow-2.5.xsd">

    <!--1. var요소를 사용하여 플로 변수를 선언.
    플로변수 order는 com.example.bookmal.domain.Order클래스로 커맨드 객체 Order를 의미
    Order 클래스는 java.io.Serializable 인터페이스로 구현되어 있어야 함.-->
    <var name="order" class="com.example.bookmall.domain.Order"/>

    <!--action-state 요소를 사용하여 액션을 실행-->
    <action-state id="addCartToOrder">
        <!--2-1.cartServiceImpl.validateCart() 메서드의 실행 결과를 커맨드 객체 order의 속성인 cart에 저장-->
        <evaluate expression="cartServiceImpl.validateCart(requestParameters.cartId)" result="order.cart"/>
        <!--2.2.cartServiceImpl.validateCart()메서드를 실행 중 CartException 예외가 발생하면 뷰 페이지 orderCartWarning으로 이동-->
        <transition to="orderCartWarning" on-exception="com.example.bookmall.exception.CartException"/>
        <!--2-3.cartServiceImpl.validateCart()메서드가 정상적으로 처리되면 뷰페이지 orderCustomInfo로 이동-->
        <transition to="orderCustomerInfo"/>
    </action-state>

    <!--3.view-state 요소를 사용하여 흐름 단계에서 뷰를 보여주는 역할,
    view-state 요소 내의 id 속성은 플로 내에서 유일해야 한다.
    model 속성은 커맨드 객체로 var요소에 선언된 플로 변수이어야한다.
    또한 view 속성을 사용하여 출력하는 뷰 페이지를 설정하는데 view 속성을 정의 하지 않을 때는
    view-state 요소 내의 id 속성이 뷰 페이지 이름과 동일해야 함.-->

    <!--4.현재 상태 뷰 페이지 orderCustomInfo에서 이벤트 ID가 customerInfo이면 뷰 페이지 orderShippingInfo로 이동 -->
    <view-state id="orderCustomerInfo" model="order">
        <transition on="customerInfo" to="orderShippingInfo"/>
    </view-state>

    <!--5.현재 상태 뷰 페이지 orderShippingInfo에서 이벤트 ID가 shippingInfo이면 뷰 페이지 orderConfirmation으로 이동,
        이벤트 ID가 backToCustomerInfo이면 뷰 페이지 orderCostomerInfo로 이동-->
    <view-state id="orderShippingInfo" model="order">
        <transition on="shippingInfo" to="orderConfirmation"/>
        <transition on="backToCustomerInfo" to="orderCustomerInfo"/>
    </view-state>

    <!--6.현재 상태 뷰 페이지 orderConfirmation에서 이벤트 ID가 orderConfirmed이면 뷰 페이지 ConfirmOrder으로 이동,
   이벤트 ID가 backToShippingInfo이면 뷰 페이지 orderShippingInfo로 이동-->
    <view-state id="orderConfirmation">
        <transition on="orderConfirmed" to="confirmOrder"/>
        <transition on="backToShippingInfo" to="orderShippingInfo"/>
    </view-state>

    <!--7.현재 상태 뷰 페이지 confirmOrder에서 orderServeiceImple.saveOrder()메서드를 실행한 후
    반환 값을 커맨드 객체 order의 orderId 속성에 저장하고, 뷰 페이지 orderFinished로 이동-->
    <action-state id="confirmOrder">
        <evaluate expression="orderServiceImpl.saveOrder(order)" result="order.orderId"/>
        <transition to="orderFinished"/>
    </action-state>

    <!--8.현재 상태 뷰 페이지 orderCartWarning이면 endState 상태로 이동하여 페이지 흐름을 종료-->
    <view-state id="orderCartWarning">
        <transition on="endState"/>
    </view-state>

    <!--9.현재 상태 뷰 페이지 orderCartFinished가 되면 endState 상태로 이동하여 페이지 흐름을 종료-->
    <view-state id="orderFinished" model="order">
        <transition to="endState"/>
    </view-state>
    <!--10.현재 상태가 endState로 페이지 흐름을 종료-->
    <end-state id="endState"/>
    <!--11.현재 상태가 orderCancelled이면 뷰 페이지 orderCancelled를 출력-->
    <end-state id="orderCancelled" view="orderCartWarning.html"/>
    <!--12.global-transitions 요소는 모든 상태에서 사용할 수 있으며,
    어떤 상태이든지 이벤트 ID로 cancel이 발생하면 endState 상태로 이동-->
    <global-transitions>
        <transition on="cancel" to="endState"/>
    </global-transitions>

</flow>
